// Copyright 2018-2025 the Deno authors. MIT license.
// This module is browser compatible.
import { AssertionError } from "./assertion_error.ts";
import { stripAnsiCode } from "jsr:@std/internal@^1.0.6/styles";

/**
 * Make an assertion that `error` is an `Error`.
 * If not then an error will be thrown.
 * An error class and a string that should be included in the
 * error message can also be asserted.
 *
 * @example Usage
 * ```ts ignore
 * import { assertIsError } from "@std/assert";
 *
 * assertIsError(null); // Throws
 * assertIsError(new RangeError("Out of range")); // Doesn't throw
 * assertIsError(new RangeError("Out of range"), SyntaxError); // Throws
 * assertIsError(new RangeError("Out of range"), SyntaxError, "Out of range"); // Doesn't throw
 * assertIsError(new RangeError("Out of range"), SyntaxError, "Within range"); // Throws
 * ```
 *
 * @typeParam E The type of the error to assert.
 * @param error The error to assert.
 * @param ErrorClass The optional error class to assert.
 * @param msgMatches The optional string or RegExp to assert in the error message.
 * @param msg The optional message to display if the assertion fails.
 */
export function assertIsError<E extends Error = Error>(
  error: unknown,
  // deno-lint-ignore no-explicit-any
  ErrorClass?: abstract new (...args: any[]) => E,
  msgMatches?: string | RegExp,
  msg?: string,
): asserts error is E {
  const msgSuffix = msg ? `: ${msg}` : ".";
  if (!(error instanceof Error)) {
    throw new AssertionError(
      `Expected "error" to be an Error object${msgSuffix}`,
    );
  }
  if (ErrorClass && !(error instanceof ErrorClass)) {
    msg =
      `Expected error to be instance of "${ErrorClass.name}", but was "${error?.constructor?.name}"${msgSuffix}`;
    throw new AssertionError(msg);
  }
  let msgCheck;
  if (typeof msgMatches === "string") {
    msgCheck = stripAnsiCode(error.message).includes(
      stripAnsiCode(msgMatches),
    );
  }
  if (msgMatches instanceof RegExp) {
    msgCheck = msgMatches.test(stripAnsiCode(error.message));
  }

  if (msgMatches && !msgCheck) {
    msg = `Expected error message to include ${
      msgMatches instanceof RegExp
        ? msgMatches.toString()
        : JSON.stringify(msgMatches)
    }, but got ${JSON.stringify(error?.message)}${msgSuffix}`;
    throw new AssertionError(msg);
  }
}

// denoCacheMetadata={"headers":{"cache-control":"public, max-age=31536000, immutable","via":"1.1 google","x-robots-tag":"noindex","x-goog-storage-class":"STANDARD","content-type":"text/typescript","access-control-allow-origin":"*","access-control-expose-headers":"*","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-guploader-uploadid":"AAO2VwpZB8CWKqeOc_80-BEFXHxOfTZr42a2sksqwHnPZ_xke5FtcCROxICqmG-R0F3YSO_s","x-goog-metageneration":"1","date":"Tue, 13 May 2025 23:23:02 GMT","x-jsr-cache-id":"YYZ","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","expires":"Wed, 13 May 2026 23:23:02 GMT","x-jsr-cache-status":"hit","cross-origin-resource-policy":"cross-origin","x-content-type-options":"nosniff","server":"UploadServer","x-goog-generation":"1745475807316171","last-modified":"Thu, 24 Apr 2025 06:23:27 GMT","content-length":"2344","x-goog-stored-content-encoding":"identity","x-goog-hash":"crc32c=NvMSlg==,md5=sU4d0fa+hf/nfEQjRFIoAQ==","etag":"\"b14e1dd1f6be85ffe77c442344522801\"","x-goog-stored-content-length":"2344","accept-ranges":"bytes","age":"1950"},"url":"https://jsr.io/@std/assert/1.0.13/is_error.ts","time":1747180532}