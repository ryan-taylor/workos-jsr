// Copyright 2018-2025 the Deno authors. MIT license.
// This module is browser compatible.
import { equal } from "./equal.ts";
import { format } from "jsr:@std/internal@^1.0.6/format";
import { AssertionError } from "./assertion_error.ts";

/** An array-like object (`Array`, `Uint8Array`, `NodeList`, etc.) that is not a string */
export type ArrayLikeArg<T> = ArrayLike<T> & object;

/**
 * Make an assertion that `actual` includes the `expected` values. If not then
 * an error will be thrown.
 *
 * Type parameter can be specified to ensure values under comparison have the
 * same type.
 *
 * @example Usage
 * ```ts ignore
 * import { assertArrayIncludes } from "@std/assert";
 *
 * assertArrayIncludes([1, 2], [2]); // Doesn't throw
 * assertArrayIncludes([1, 2], [3]); // Throws
 * ```
 *
 * @typeParam T The type of the elements in the array to compare.
 * @param actual The array-like object to check for.
 * @param expected The array-like object to check for.
 * @param msg The optional message to display if the assertion fails.
 */
export function assertArrayIncludes<T>(
  actual: ArrayLikeArg<T>,
  expected: ArrayLikeArg<T>,
  msg?: string,
) {
  const missing: unknown[] = [];
  for (let i = 0; i < expected.length; i++) {
    let found = false;
    for (let j = 0; j < actual.length; j++) {
      if (equal(expected[i], actual[j])) {
        found = true;
        break;
      }
    }
    if (!found) {
      missing.push(expected[i]);
    }
  }
  if (missing.length === 0) {
    return;
  }

  const msgSuffix = msg ? `: ${msg}` : ".";
  msg = `Expected actual: "${format(actual)}" to include: "${
    format(expected)
  }"${msgSuffix}\nmissing: ${format(missing)}`;
  throw new AssertionError(msg);
}

// denoCacheMetadata={"headers":{"x-content-type-options":"nosniff","access-control-allow-origin":"*","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","x-guploader-uploadid":"AAO2Vwp69MIwg27uY3c5zAT2EQW1xv0n9y-Qj3V83ko-z-kzjwfyTMiUgp0kqQgrkqZp4I8M","x-goog-hash":"crc32c=xVJn1A==,md5=by9MpzDVWtY51Va8S7I5Lg==","date":"Tue, 13 May 2025 23:23:02 GMT","x-jsr-cache-id":"YYZ","x-goog-stored-content-encoding":"identity","accept-ranges":"bytes","server":"UploadServer","content-type":"text/typescript","x-jsr-cache-status":"hit","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-robots-tag":"noindex","x-goog-storage-class":"STANDARD","content-length":"1722","expires":"Wed, 13 May 2026 23:23:02 GMT","access-control-expose-headers":"*","x-goog-stored-content-length":"1722","etag":"\"6f2f4ca730d55ad639d556bc4bb2392e\"","x-goog-metageneration":"1","x-goog-generation":"1745475807272874","via":"1.1 google","last-modified":"Thu, 24 Apr 2025 06:23:27 GMT","cross-origin-resource-policy":"cross-origin","age":"1950","cache-control":"public, max-age=31536000, immutable"},"url":"https://jsr.io/@std/assert/1.0.13/array_includes.ts","time":1747180532}