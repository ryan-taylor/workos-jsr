/**
 * HTTP Client for API operations
 * @class HttpClient
 */
export class HttpClient {
    protected basePath: string;
    protected headers: Record<string, string>;

    constructor(basePath: string = '{{&basePath}}', headers: Record<string, string> = {}) {
        this.basePath = basePath;
        this.headers = {
            'Content-Type': 'application/json',
            ...headers
        };
    }

    /**
     * Execute an HTTP request
     * @param request The request configuration
     * @returns Promise with the response data
     */
    public async execute(request: {
        url: string;
        method: string;
        query?: Record<string, unknown>;
        headers?: Record<string, string>;
        body?: unknown;
    }): Promise<any> {
        const { url, method, query, headers = {}, body } = request;
        
        // Build URL with query parameters
        const queryString = query ? this.buildQueryString(query) : '';
        const fullUrl = queryString ? `${url}?${queryString}` : url;
        
        // Merge request headers with default headers
        const mergedHeaders = {
            ...this.headers,
            ...headers
        };
        
        // Build request options
        const options: RequestInit = {
            method,
            headers: mergedHeaders,
        };
        
        if (body) {
            options.body = JSON.stringify(body);
        }
        
        // Execute request
        const response = await fetch(fullUrl, options);
        
        // Handle response
        if (!response.ok) {
            throw new Error(`API request failed: ${response.status} ${response.statusText}`);
        }
        
        // Check if response has content
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            return response.json();
        }
        
        return response.text();
    }
    
    /**
     * Build query string from parameters
     * @param params Query parameters
     * @returns Formatted query string
     */
    private buildQueryString(params: Record<string, unknown>): string {
        return Object.entries(params)
            .filter(([_, value]) => value !== undefined && value !== null)
            .map(([key, value]) => {
                if (Array.isArray(value)) {
                    return value.map(v => `${encodeURIComponent(key)}=${encodeURIComponent(String(v))}`).join('&');
                }
                return `${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`;
            })
            .join('&');
    }
}