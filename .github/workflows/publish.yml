name: Publish to JSR

on:
  push:
    branches:
      - main
  # Support manually triggering a new JSR release
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty for automatic)'
        required: false
        type: string

permissions:
  # Required for JSR OIDC authentication
  id-token: write
  contents: write

defaults:
  run:
    shell: bash

jobs:
  validate:
    name: Validate Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      
      - name: Run Tests
        run: deno task test:ci
      
      - name: Verify JSR Publishing Configuration
        run: |
          echo "Verifying JSR configuration..."
          # Check if the deno.json file contains publish configuration
          if ! jq -e '.publish' deno.json > /dev/null; then
            echo "Error: Missing publish configuration in deno.json"
            exit 1
          fi
          
          # Check if JSR name is properly configured
          if ! jq -e '.name' deno.json > /dev/null; then
            echo "Error: Missing package name in deno.json"
            exit 1
          fi
          
          echo "JSR configuration verified."

  publish:
    name: Publish to JSR
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: Install JSR CLI
        run: npm install -g @jsr/cli
      
      - name: Set Version
        if: github.event.inputs.version != ''
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Setting version to $VERSION"
          # Update version in deno.json
          jq ".version=\"$VERSION\"" deno.json > deno.json.tmp && mv deno.json.tmp deno.json
          # Update version in package.json
          jq ".version=\"$VERSION\" | .jsr.version=\"$VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      - name: Determine Version (Auto)
        if: github.event.inputs.version == ''
        run: |
          CURRENT_VERSION=$(jq -r '.version' deno.json)
          # Extract major.minor.patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "Incrementing version from $CURRENT_VERSION to $NEW_VERSION"
          
          # Update version in deno.json
          jq ".version=\"$NEW_VERSION\"" deno.json > deno.json.tmp && mv deno.json.tmp deno.json
          # Update version in package.json
          jq ".version=\"$NEW_VERSION\" | .jsr.version=\"$NEW_VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json
          
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
      - name: Publish to JSR
        run: npx jsr publish
      
      - name: Create Git Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          generate_release_notes: true