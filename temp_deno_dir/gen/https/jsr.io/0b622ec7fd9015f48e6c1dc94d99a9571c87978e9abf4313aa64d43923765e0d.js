// Copyright 2018-2025 the Deno authors. MIT license.
// This module is browser compatible.
import { AssertionError } from "./assertion_error.ts";
import { assertIsError } from "./is_error.ts";
export async function assertRejects(
  fn,
  errorClassOrMsg,
  msgIncludesOrMsg,
  msg,
) {
  // deno-lint-ignore no-explicit-any
  let ErrorClass;
  let msgIncludes;
  let err;
  if (typeof errorClassOrMsg !== "string") {
    if (
      errorClassOrMsg === undefined ||
      errorClassOrMsg.prototype instanceof Error ||
      errorClassOrMsg.prototype === Error.prototype
    ) {
      ErrorClass = errorClassOrMsg;
      msgIncludes = msgIncludesOrMsg;
    }
  } else {
    msg = errorClassOrMsg;
  }
  let doesThrow = false;
  let isPromiseReturned = false;
  const msgSuffix = msg ? `: ${msg}` : ".";
  try {
    const possiblePromise = fn();
    if (
      possiblePromise && typeof possiblePromise === "object" &&
      typeof possiblePromise.then === "function"
    ) {
      isPromiseReturned = true;
      await possiblePromise;
    } else {
      throw new Error();
    }
  } catch (error) {
    if (!isPromiseReturned) {
      throw new AssertionError(
        `Function throws when expected to reject${msgSuffix}`,
      );
    }
    if (ErrorClass) {
      if (!(error instanceof Error)) {
        throw new AssertionError(`A non-Error object was rejected${msgSuffix}`);
      }
      assertIsError(error, ErrorClass, msgIncludes, msg);
    }
    err = error;
    doesThrow = true;
  }
  if (!doesThrow) {
    throw new AssertionError(`Expected function to reject${msgSuffix}`);
  }
  return err;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vanNyLmlvL0BzdGQvYXNzZXJ0LzEuMC4xMy9yZWplY3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjUgdGhlIERlbm8gYXV0aG9ycy4gTUlUIGxpY2Vuc2UuXG4vLyBUaGlzIG1vZHVsZSBpcyBicm93c2VyIGNvbXBhdGlibGUuXG5pbXBvcnQgeyBBc3NlcnRpb25FcnJvciB9IGZyb20gXCIuL2Fzc2VydGlvbl9lcnJvci50c1wiO1xuaW1wb3J0IHsgYXNzZXJ0SXNFcnJvciB9IGZyb20gXCIuL2lzX2Vycm9yLnRzXCI7XG5cbi8qKlxuICogRXhlY3V0ZXMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgcHJvbWlzZSwgZXhwZWN0aW5nIGl0IHRvIHJlamVjdC5cbiAqXG4gKiBUbyBhc3NlcnQgdGhhdCBhIHN5bmNocm9ub3VzIGZ1bmN0aW9uIHRocm93cywgdXNlIHtAbGlua2NvZGUgYXNzZXJ0VGhyb3dzfS5cbiAqXG4gKiBAZXhhbXBsZSBVc2FnZVxuICogYGBgdHMgaWdub3JlXG4gKiBpbXBvcnQgeyBhc3NlcnRSZWplY3RzIH0gZnJvbSBcIkBzdGQvYXNzZXJ0XCI7XG4gKlxuICogYXdhaXQgYXNzZXJ0UmVqZWN0cyhhc3luYyAoKSA9PiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoKSkpOyAvLyBEb2Vzbid0IHRocm93XG4gKiBhd2FpdCBhc3NlcnRSZWplY3RzKGFzeW5jICgpID0+IGNvbnNvbGUubG9nKFwiSGVsbG8gd29ybGRcIikpOyAvLyBUaHJvd3NcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBmbiBUaGUgZnVuY3Rpb24gdG8gZXhlY3V0ZS5cbiAqIEBwYXJhbSBtc2cgVGhlIG9wdGlvbmFsIG1lc3NhZ2UgdG8gZGlzcGxheSBpZiB0aGUgYXNzZXJ0aW9uIGZhaWxzLlxuICogQHJldHVybnMgVGhlIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgdG8gdGhlIHRocm93biBlcnJvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFJlamVjdHMoXG4gIGZuOiAoKSA9PiBQcm9taXNlTGlrZTx1bmtub3duPixcbiAgbXNnPzogc3RyaW5nLFxuKTogUHJvbWlzZTx1bmtub3duPjtcbi8qKlxuICogRXhlY3V0ZXMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgcHJvbWlzZSwgZXhwZWN0aW5nIGl0IHRvIHJlamVjdC5cbiAqIElmIGl0IGRvZXMgbm90LCB0aGVuIGl0IHRocm93cy4gQW4gZXJyb3IgY2xhc3MgYW5kIGEgc3RyaW5nIHRoYXQgc2hvdWxkIGJlXG4gKiBpbmNsdWRlZCBpbiB0aGUgZXJyb3IgbWVzc2FnZSBjYW4gYWxzbyBiZSBhc3NlcnRlZC5cbiAqXG4gKiBUbyBhc3NlcnQgdGhhdCBhIHN5bmNocm9ub3VzIGZ1bmN0aW9uIHRocm93cywgdXNlIHtAbGlua2NvZGUgYXNzZXJ0VGhyb3dzfS5cbiAqXG4gKiBAZXhhbXBsZSBVc2FnZVxuICogYGBgdHMgaWdub3JlXG4gKiBpbXBvcnQgeyBhc3NlcnRSZWplY3RzIH0gZnJvbSBcIkBzdGQvYXNzZXJ0XCI7XG4gKlxuICogYXdhaXQgYXNzZXJ0UmVqZWN0cyhhc3luYyAoKSA9PiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoKSksIEVycm9yKTsgLy8gRG9lc24ndCB0aHJvd1xuICogYXdhaXQgYXNzZXJ0UmVqZWN0cyhhc3luYyAoKSA9PiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoKSksIFN5bnRheEVycm9yKTsgLy8gVGhyb3dzXG4gKiBgYGBcbiAqXG4gKiBAdHlwZVBhcmFtIEUgVGhlIGVycm9yIGNsYXNzIHRvIGFzc2VydC5cbiAqIEBwYXJhbSBmbiBUaGUgZnVuY3Rpb24gdG8gZXhlY3V0ZS5cbiAqIEBwYXJhbSBFcnJvckNsYXNzIFRoZSBlcnJvciBjbGFzcyB0byBhc3NlcnQuXG4gKiBAcGFyYW0gbXNnSW5jbHVkZXMgVGhlIHN0cmluZyB0aGF0IHNob3VsZCBiZSBpbmNsdWRlZCBpbiB0aGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSBtc2cgVGhlIG9wdGlvbmFsIG1lc3NhZ2UgdG8gZGlzcGxheSBpZiB0aGUgYXNzZXJ0aW9uIGZhaWxzLlxuICogQHJldHVybnMgVGhlIHByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgdG8gdGhlIHRocm93biBlcnJvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFJlamVjdHM8RSBleHRlbmRzIEVycm9yID0gRXJyb3I+KFxuICBmbjogKCkgPT4gUHJvbWlzZUxpa2U8dW5rbm93bj4sXG4gIC8vIGRlbm8tbGludC1pZ25vcmUgbm8tZXhwbGljaXQtYW55XG4gIEVycm9yQ2xhc3M6IGFic3RyYWN0IG5ldyAoLi4uYXJnczogYW55W10pID0+IEUsXG4gIG1zZ0luY2x1ZGVzPzogc3RyaW5nLFxuICBtc2c/OiBzdHJpbmcsXG4pOiBQcm9taXNlPEU+O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFzc2VydFJlamVjdHM8RSBleHRlbmRzIEVycm9yID0gRXJyb3I+KFxuICBmbjogKCkgPT4gUHJvbWlzZUxpa2U8dW5rbm93bj4sXG4gIGVycm9yQ2xhc3NPck1zZz86XG4gICAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgICB8IChhYnN0cmFjdCBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBFKVxuICAgIHwgc3RyaW5nLFxuICBtc2dJbmNsdWRlc09yTXNnPzogc3RyaW5nLFxuICBtc2c/OiBzdHJpbmcsXG4pOiBQcm9taXNlPEUgfCBFcnJvciB8IHVua25vd24+IHtcbiAgLy8gZGVuby1saW50LWlnbm9yZSBuby1leHBsaWNpdC1hbnlcbiAgbGV0IEVycm9yQ2xhc3M6IChhYnN0cmFjdCBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBFKSB8IHVuZGVmaW5lZDtcbiAgbGV0IG1zZ0luY2x1ZGVzOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGxldCBlcnI7XG5cbiAgaWYgKHR5cGVvZiBlcnJvckNsYXNzT3JNc2cgIT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoXG4gICAgICBlcnJvckNsYXNzT3JNc2cgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgZXJyb3JDbGFzc09yTXNnLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVycm9yIHx8XG4gICAgICBlcnJvckNsYXNzT3JNc2cucHJvdG90eXBlID09PSBFcnJvci5wcm90b3R5cGVcbiAgICApIHtcbiAgICAgIEVycm9yQ2xhc3MgPSBlcnJvckNsYXNzT3JNc2c7XG4gICAgICBtc2dJbmNsdWRlcyA9IG1zZ0luY2x1ZGVzT3JNc2c7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1zZyA9IGVycm9yQ2xhc3NPck1zZztcbiAgfVxuICBsZXQgZG9lc1Rocm93ID0gZmFsc2U7XG4gIGxldCBpc1Byb21pc2VSZXR1cm5lZCA9IGZhbHNlO1xuICBjb25zdCBtc2dTdWZmaXggPSBtc2cgPyBgOiAke21zZ31gIDogXCIuXCI7XG4gIHRyeSB7XG4gICAgY29uc3QgcG9zc2libGVQcm9taXNlID0gZm4oKTtcbiAgICBpZiAoXG4gICAgICBwb3NzaWJsZVByb21pc2UgJiZcbiAgICAgIHR5cGVvZiBwb3NzaWJsZVByb21pc2UgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgIHR5cGVvZiBwb3NzaWJsZVByb21pc2UudGhlbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgKSB7XG4gICAgICBpc1Byb21pc2VSZXR1cm5lZCA9IHRydWU7XG4gICAgICBhd2FpdCBwb3NzaWJsZVByb21pc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoIWlzUHJvbWlzZVJldHVybmVkKSB7XG4gICAgICB0aHJvdyBuZXcgQXNzZXJ0aW9uRXJyb3IoXG4gICAgICAgIGBGdW5jdGlvbiB0aHJvd3Mgd2hlbiBleHBlY3RlZCB0byByZWplY3Qke21zZ1N1ZmZpeH1gLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKEVycm9yQ2xhc3MpIHtcbiAgICAgIGlmICghKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBBc3NlcnRpb25FcnJvcihgQSBub24tRXJyb3Igb2JqZWN0IHdhcyByZWplY3RlZCR7bXNnU3VmZml4fWApO1xuICAgICAgfVxuICAgICAgYXNzZXJ0SXNFcnJvcihcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIEVycm9yQ2xhc3MsXG4gICAgICAgIG1zZ0luY2x1ZGVzLFxuICAgICAgICBtc2csXG4gICAgICApO1xuICAgIH1cbiAgICBlcnIgPSBlcnJvcjtcbiAgICBkb2VzVGhyb3cgPSB0cnVlO1xuICB9XG4gIGlmICghZG9lc1Rocm93KSB7XG4gICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKFxuICAgICAgYEV4cGVjdGVkIGZ1bmN0aW9uIHRvIHJlamVjdCR7bXNnU3VmZml4fWAsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gZXJyO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRDtBQUNyRCxxQ0FBcUM7QUFDckMsU0FBUyxjQUFjLFFBQVEsdUJBQXVCO0FBQ3RELFNBQVMsYUFBYSxRQUFRLGdCQUFnQjtBQW9EOUMsT0FBTyxlQUFlLGNBQ3BCLEVBQThCLEVBQzlCLGVBR1UsRUFDVixnQkFBeUIsRUFDekIsR0FBWTtFQUVaLG1DQUFtQztFQUNuQyxJQUFJO0VBQ0osSUFBSTtFQUNKLElBQUk7RUFFSixJQUFJLE9BQU8sb0JBQW9CLFVBQVU7SUFDdkMsSUFDRSxvQkFBb0IsYUFDcEIsZ0JBQWdCLFNBQVMsWUFBWSxTQUNyQyxnQkFBZ0IsU0FBUyxLQUFLLE1BQU0sU0FBUyxFQUM3QztNQUNBLGFBQWE7TUFDYixjQUFjO0lBQ2hCO0VBQ0YsT0FBTztJQUNMLE1BQU07RUFDUjtFQUNBLElBQUksWUFBWTtFQUNoQixJQUFJLG9CQUFvQjtFQUN4QixNQUFNLFlBQVksTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEdBQUc7RUFDckMsSUFBSTtJQUNGLE1BQU0sa0JBQWtCO0lBQ3hCLElBQ0UsbUJBQ0EsT0FBTyxvQkFBb0IsWUFDM0IsT0FBTyxnQkFBZ0IsSUFBSSxLQUFLLFlBQ2hDO01BQ0Esb0JBQW9CO01BQ3BCLE1BQU07SUFDUixPQUFPO01BQ0wsTUFBTSxJQUFJO0lBQ1o7RUFDRixFQUFFLE9BQU8sT0FBTztJQUNkLElBQUksQ0FBQyxtQkFBbUI7TUFDdEIsTUFBTSxJQUFJLGVBQ1IsQ0FBQyx1Q0FBdUMsRUFBRSxXQUFXO0lBRXpEO0lBQ0EsSUFBSSxZQUFZO01BQ2QsSUFBSSxDQUFDLENBQUMsaUJBQWlCLEtBQUssR0FBRztRQUM3QixNQUFNLElBQUksZUFBZSxDQUFDLCtCQUErQixFQUFFLFdBQVc7TUFDeEU7TUFDQSxjQUNFLE9BQ0EsWUFDQSxhQUNBO0lBRUo7SUFDQSxNQUFNO0lBQ04sWUFBWTtFQUNkO0VBQ0EsSUFBSSxDQUFDLFdBQVc7SUFDZCxNQUFNLElBQUksZUFDUixDQUFDLDJCQUEyQixFQUFFLFdBQVc7RUFFN0M7RUFDQSxPQUFPO0FBQ1QifQ==
// denoCacheMetadata=12835744686387510231,101912654802174556
