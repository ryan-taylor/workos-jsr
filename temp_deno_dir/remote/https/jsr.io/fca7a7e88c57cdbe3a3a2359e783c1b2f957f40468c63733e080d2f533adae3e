// Copyright 2018-2025 the Deno authors. MIT license.
// This module is browser compatible.
import { AssertionError } from "./assertion_error.ts";

/** Any constructor */
// deno-lint-ignore no-explicit-any
export type AnyConstructor = new (...args: any[]) => any;
/** Gets constructor type */
export type GetConstructorType<T extends AnyConstructor> = InstanceType<T>;

/**
 * Make an assertion that `obj` is an instance of `type`.
 * If not then throw.
 *
 * @example Usage
 * ```ts ignore
 * import { assertInstanceOf } from "@std/assert";
 *
 * assertInstanceOf(new Date(), Date); // Doesn't throw
 * assertInstanceOf(new Date(), Number); // Throws
 * ```
 *
 * @typeParam T The expected type of the object.
 * @param actual The object to check.
 * @param expectedType The expected class constructor.
 * @param msg The optional message to display if the assertion fails.
 */
export function assertInstanceOf<
  // deno-lint-ignore no-explicit-any
  T extends abstract new (...args: any[]) => any,
>(
  actual: unknown,
  expectedType: T,
  msg = "",
): asserts actual is InstanceType<T> {
  if (actual instanceof expectedType) return;

  const msgSuffix = msg ? `: ${msg}` : ".";
  const expectedTypeStr = expectedType.name;

  let actualTypeStr = "";
  if (actual === null) {
    actualTypeStr = "null";
  } else if (actual === undefined) {
    actualTypeStr = "undefined";
  } else if (typeof actual === "object") {
    actualTypeStr = actual.constructor?.name ?? "Object";
  } else {
    actualTypeStr = typeof actual;
  }

  if (expectedTypeStr === actualTypeStr) {
    msg =
      `Expected object to be an instance of "${expectedTypeStr}"${msgSuffix}`;
  } else if (actualTypeStr === "function") {
    msg =
      `Expected object to be an instance of "${expectedTypeStr}" but was not an instanced object${msgSuffix}`;
  } else {
    msg =
      `Expected object to be an instance of "${expectedTypeStr}" but was "${actualTypeStr}"${msgSuffix}`;
  }

  throw new AssertionError(msg);
}

// denoCacheMetadata={"headers":{"access-control-expose-headers":"*","cross-origin-resource-policy":"cross-origin","x-goog-hash":"crc32c=QJSQOA==,md5=aAQUGSA1RFe3fYCFeKI8HA==","server":"UploadServer","access-control-allow-origin":"*","x-goog-generation":"1745475807430249","x-jsr-cache-status":"hit","cache-control":"public, max-age=31536000, immutable","etag":"\"6804141920354457b77d808578a23c1c\"","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-metageneration":"1","last-modified":"Thu, 24 Apr 2025 06:23:27 GMT","x-guploader-uploadid":"AAO2VwoWWrhoU3VWS4T_03zOLtj_awyRQlbC4p-GHshDW9lc9f6mRimZQLBEdsgyLBh0_p-H","x-goog-stored-content-length":"1996","x-goog-storage-class":"STANDARD","x-goog-stored-content-encoding":"identity","accept-ranges":"bytes","content-type":"text/typescript","x-jsr-cache-id":"YYZ","x-robots-tag":"noindex","via":"1.1 google","date":"Tue, 13 May 2025 23:23:02 GMT","x-content-type-options":"nosniff","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","expires":"Wed, 13 May 2026 23:23:02 GMT","content-length":"1996","age":"1950"},"url":"https://jsr.io/@std/assert/1.0.13/instance_of.ts","time":1747180532}