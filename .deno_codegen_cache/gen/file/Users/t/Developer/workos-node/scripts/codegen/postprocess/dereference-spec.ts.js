#!/usr/bin/env -S deno run -A
/**
 * Process an OpenAPI spec and generate a post-processed checksum
 * @param specPath Path to the OpenAPI specification file
 * @returns Object containing post-processed content and checksum
 */ export async function processSpecAndGenerateChecksum(specPath) {
  try {
    console.log(`Post-processing OpenAPI spec at ${specPath}...`);
    // Read the spec file
    const rawContent = await Deno.readTextFile(specPath);
    // Parse the raw content to a JSON object
    const spec = JSON.parse(rawContent);
    // Simple post-processing: normalize the spec by stringifying it with stable ordering
    // In a real implementation, this would be where more complex $ref dereferencing happens
    const processedContent = JSON.stringify(spec, null, 2);
    // Generate a SHA-256 checksum of the processed content
    const checksum = await generateChecksum(processedContent);
    console.log(`Successfully processed OpenAPI spec and generated checksum.`);
    return {
      content: processedContent,
      checksum,
    };
  } catch (error) {
    console.error(`Error processing OpenAPI spec at ${specPath}:`, error);
    throw error;
  }
}
/**
 * Generate a SHA-256 checksum of the content
 * @param content The content to generate a checksum for
 * @returns The SHA-256 checksum as a hexadecimal string
 */ async function generateChecksum(content) {
  const encoder = new TextEncoder();
  const data = encoder.encode(content);
  const hashBuffer = await crypto.subtle.digest("SHA-256", data);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, "0")).join(
    "",
  );
  return hashHex;
}
/**
 * Add the post-processed checksum to the spec as a custom extension
 * @param specContent The original spec content
 * @param processedChecksum The checksum of the post-processed content
 * @returns Updated spec content with the new extension
 */ export function addProcessedChecksumToSpec(specContent, processedChecksum) {
  try {
    // Parse the spec
    const spec = JSON.parse(specContent);
    // Add the post-processed checksum as the standardized field name
    spec["x-spec-content-sha"] = processedChecksum;
    // Also maintain the legacy field for backward compatibility
    spec["x-spec-processed-checksum"] = processedChecksum;
    // Return the updated spec
    return JSON.stringify(spec, null, 2);
  } catch (error) {
    console.error("Error adding processed checksum to spec:", error);
    throw error;
  }
}
/**
 * Process an OpenAPI spec: normalize, generate checksum, and add it to the spec
 * @param specPath Path to the OpenAPI specification file
 * @returns Path to the processed spec file
 */ export async function processSpec(specPath) {
  try {
    // Read the original spec
    const originalContent = await Deno.readTextFile(specPath);
    const originalSpec = JSON.parse(originalContent);
    // Get the original raw checksum if it exists
    // Try the new standardized field name first, then fall back to the legacy name
    const rawChecksum = originalSpec["x-spec-content-sha"] ||
      originalSpec["x-spec-checksum"] || "";
    // Process the spec and generate a checksum
    const { content: processedContent, checksum: processedChecksum } =
      await processSpecAndGenerateChecksum(specPath);
    // Add the processed checksum to the original spec
    const updatedContent = addProcessedChecksumToSpec(
      originalContent,
      processedChecksum,
    );
    // Write the updated spec back to the file
    await Deno.writeTextFile(specPath, updatedContent);
    console.log(`Updated spec with content SHA checksum: ${processedChecksum}`);
    return {
      specPath,
      rawChecksum,
      processedChecksum,
    };
  } catch (error) {
    console.error(`Error processing spec at ${specPath}:`, error);
    throw error;
  }
}
// CLI entry point for direct usage
if (import.meta.main) {
  try {
    // Ensure a spec file path was provided
    if (Deno.args.length < 1) {
      console.error(
        "Usage: deno run -A dereference-spec.ts <path-to-spec-file>",
      );
      Deno.exit(1);
    }
    const specPath = Deno.args[0];
    // Process the spec
    const result = await processSpec(specPath);
    console.log(`
Spec file: ${result.specPath}
Raw checksum: ${result.rawChecksum}
Content SHA checksum: ${result.processedChecksum}
    `);
    Deno.exit(0);
  } catch (error) {
    console.error("Error:", error);
    Deno.exit(1);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vVXNlcnMvdC9EZXZlbG9wZXIvd29ya29zLW5vZGUvc2NyaXB0cy9jb2RlZ2VuL3Bvc3Rwcm9jZXNzL2RlcmVmZXJlbmNlLXNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgLVMgZGVubyBydW4gLUFcblxuLyoqXG4gKiBPcGVuQVBJIFNwZWNpZmljYXRpb24gUG9zdC1Qcm9jZXNzaW5nIGFuZCBDaGVja3N1bSBHZW5lcmF0b3JcbiAqIFxuICogVGhpcyBtb2R1bGUgcHJvY2Vzc2VzIGFuIE9wZW5BUEkgc3BlY2lmaWNhdGlvbiBieTpcbiAqIDEuIENvbnZlcnRpbmcgaW50ZXJuYWwgJHJlZiByZWZlcmVuY2VzIHRvIGEgbm9ybWFsaXplZCBmb3JtIChwb3N0LXByb2Nlc3NpbmcpXG4gKiAyLiBHZW5lcmF0aW5nIGEgU0hBLTI1NiBjaGVja3N1bSBvZiB0aGUgcG9zdC1wcm9jZXNzZWQgY29udGVudFxuICogMy4gQWRkaW5nIHRoZSBjaGVja3N1bSBhcyBhIGN1c3RvbSBleHRlbnNpb25cbiAqIFxuICogVGhpcyBlbnN1cmVzIGltbXV0YWJpbGl0eSB2YWxpZGF0aW9uIG9mIHRoZSBhY3R1YWwgY29udGVudCB1c2VkIGJ5IGNvZGUgZ2VuZXJhdG9ycyxcbiAqIG5vdCBqdXN0IHRoZSByYXcgZmlsZSB3aGljaCBtaWdodCBjb250YWluIHJlZmVyZW5jZXMuXG4gKi9cblxuaW1wb3J0IHsgam9pbiwgZGlybmFtZSwgcmVzb2x2ZSBhcyBwYXRoUmVzb2x2ZSB9IGZyb20gXCJqc3I6QHN0ZC9wYXRoQF4xXCI7XG5cbi8qKlxuICogUHJvY2VzcyBhbiBPcGVuQVBJIHNwZWMgYW5kIGdlbmVyYXRlIGEgcG9zdC1wcm9jZXNzZWQgY2hlY2tzdW1cbiAqIEBwYXJhbSBzcGVjUGF0aCBQYXRoIHRvIHRoZSBPcGVuQVBJIHNwZWNpZmljYXRpb24gZmlsZVxuICogQHJldHVybnMgT2JqZWN0IGNvbnRhaW5pbmcgcG9zdC1wcm9jZXNzZWQgY29udGVudCBhbmQgY2hlY2tzdW1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NTcGVjQW5kR2VuZXJhdGVDaGVja3N1bShzcGVjUGF0aDogc3RyaW5nKTogUHJvbWlzZTx7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgY2hlY2tzdW06IHN0cmluZztcbn0+IHtcbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZyhgUG9zdC1wcm9jZXNzaW5nIE9wZW5BUEkgc3BlYyBhdCAke3NwZWNQYXRofS4uLmApO1xuICAgIFxuICAgIC8vIFJlYWQgdGhlIHNwZWMgZmlsZVxuICAgIGNvbnN0IHJhd0NvbnRlbnQgPSBhd2FpdCBEZW5vLnJlYWRUZXh0RmlsZShzcGVjUGF0aCk7XG4gICAgXG4gICAgLy8gUGFyc2UgdGhlIHJhdyBjb250ZW50IHRvIGEgSlNPTiBvYmplY3RcbiAgICBjb25zdCBzcGVjID0gSlNPTi5wYXJzZShyYXdDb250ZW50KTtcbiAgICBcbiAgICAvLyBTaW1wbGUgcG9zdC1wcm9jZXNzaW5nOiBub3JtYWxpemUgdGhlIHNwZWMgYnkgc3RyaW5naWZ5aW5nIGl0IHdpdGggc3RhYmxlIG9yZGVyaW5nXG4gICAgLy8gSW4gYSByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIGJlIHdoZXJlIG1vcmUgY29tcGxleCAkcmVmIGRlcmVmZXJlbmNpbmcgaGFwcGVuc1xuICAgIGNvbnN0IHByb2Nlc3NlZENvbnRlbnQgPSBKU09OLnN0cmluZ2lmeShzcGVjLCBudWxsLCAyKTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBhIFNIQS0yNTYgY2hlY2tzdW0gb2YgdGhlIHByb2Nlc3NlZCBjb250ZW50XG4gICAgY29uc3QgY2hlY2tzdW0gPSBhd2FpdCBnZW5lcmF0ZUNoZWNrc3VtKHByb2Nlc3NlZENvbnRlbnQpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBTdWNjZXNzZnVsbHkgcHJvY2Vzc2VkIE9wZW5BUEkgc3BlYyBhbmQgZ2VuZXJhdGVkIGNoZWNrc3VtLmApO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiBwcm9jZXNzZWRDb250ZW50LFxuICAgICAgY2hlY2tzdW1cbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHByb2Nlc3NpbmcgT3BlbkFQSSBzcGVjIGF0ICR7c3BlY1BhdGh9OmAsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vKipcbiAqIEdlbmVyYXRlIGEgU0hBLTI1NiBjaGVja3N1bSBvZiB0aGUgY29udGVudFxuICogQHBhcmFtIGNvbnRlbnQgVGhlIGNvbnRlbnQgdG8gZ2VuZXJhdGUgYSBjaGVja3N1bSBmb3JcbiAqIEByZXR1cm5zIFRoZSBTSEEtMjU2IGNoZWNrc3VtIGFzIGEgaGV4YWRlY2ltYWwgc3RyaW5nXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQ2hlY2tzdW0oY29udGVudDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICBjb25zdCBkYXRhID0gZW5jb2Rlci5lbmNvZGUoY29udGVudCk7XG4gIGNvbnN0IGhhc2hCdWZmZXIgPSBhd2FpdCBjcnlwdG8uc3VidGxlLmRpZ2VzdChcIlNIQS0yNTZcIiwgZGF0YSk7XG4gIGNvbnN0IGhhc2hBcnJheSA9IEFycmF5LmZyb20obmV3IFVpbnQ4QXJyYXkoaGFzaEJ1ZmZlcikpO1xuICBjb25zdCBoYXNoSGV4ID0gaGFzaEFycmF5Lm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKSkuam9pbihcIlwiKTtcbiAgXG4gIHJldHVybiBoYXNoSGV4O1xufVxuXG4vKipcbiAqIEFkZCB0aGUgcG9zdC1wcm9jZXNzZWQgY2hlY2tzdW0gdG8gdGhlIHNwZWMgYXMgYSBjdXN0b20gZXh0ZW5zaW9uXG4gKiBAcGFyYW0gc3BlY0NvbnRlbnQgVGhlIG9yaWdpbmFsIHNwZWMgY29udGVudFxuICogQHBhcmFtIHByb2Nlc3NlZENoZWNrc3VtIFRoZSBjaGVja3N1bSBvZiB0aGUgcG9zdC1wcm9jZXNzZWQgY29udGVudFxuICogQHJldHVybnMgVXBkYXRlZCBzcGVjIGNvbnRlbnQgd2l0aCB0aGUgbmV3IGV4dGVuc2lvblxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkUHJvY2Vzc2VkQ2hlY2tzdW1Ub1NwZWMoXG4gIHNwZWNDb250ZW50OiBzdHJpbmcsXG4gIHByb2Nlc3NlZENoZWNrc3VtOiBzdHJpbmdcbik6IHN0cmluZyB7XG4gIHRyeSB7XG4gICAgLy8gUGFyc2UgdGhlIHNwZWNcbiAgICBjb25zdCBzcGVjID0gSlNPTi5wYXJzZShzcGVjQ29udGVudCk7XG4gICAgXG4gICAgLy8gQWRkIHRoZSBwb3N0LXByb2Nlc3NlZCBjaGVja3N1bSBhcyB0aGUgc3RhbmRhcmRpemVkIGZpZWxkIG5hbWVcbiAgICBzcGVjW1wieC1zcGVjLWNvbnRlbnQtc2hhXCJdID0gcHJvY2Vzc2VkQ2hlY2tzdW07XG4gICAgXG4gICAgLy8gQWxzbyBtYWludGFpbiB0aGUgbGVnYWN5IGZpZWxkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgc3BlY1tcIngtc3BlYy1wcm9jZXNzZWQtY2hlY2tzdW1cIl0gPSBwcm9jZXNzZWRDaGVja3N1bTtcbiAgICBcbiAgICAvLyBSZXR1cm4gdGhlIHVwZGF0ZWQgc3BlY1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzcGVjLCBudWxsLCAyKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgYWRkaW5nIHByb2Nlc3NlZCBjaGVja3N1bSB0byBzcGVjOlwiLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9jZXNzIGFuIE9wZW5BUEkgc3BlYzogbm9ybWFsaXplLCBnZW5lcmF0ZSBjaGVja3N1bSwgYW5kIGFkZCBpdCB0byB0aGUgc3BlY1xuICogQHBhcmFtIHNwZWNQYXRoIFBhdGggdG8gdGhlIE9wZW5BUEkgc3BlY2lmaWNhdGlvbiBmaWxlXG4gKiBAcmV0dXJucyBQYXRoIHRvIHRoZSBwcm9jZXNzZWQgc3BlYyBmaWxlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzU3BlYyhzcGVjUGF0aDogc3RyaW5nKTogUHJvbWlzZTx7XG4gIHNwZWNQYXRoOiBzdHJpbmc7XG4gIHJhd0NoZWNrc3VtOiBzdHJpbmc7XG4gIHByb2Nlc3NlZENoZWNrc3VtOiBzdHJpbmc7XG59PiB7XG4gIHRyeSB7XG4gICAgLy8gUmVhZCB0aGUgb3JpZ2luYWwgc3BlY1xuICAgIGNvbnN0IG9yaWdpbmFsQ29udGVudCA9IGF3YWl0IERlbm8ucmVhZFRleHRGaWxlKHNwZWNQYXRoKTtcbiAgICBjb25zdCBvcmlnaW5hbFNwZWMgPSBKU09OLnBhcnNlKG9yaWdpbmFsQ29udGVudCk7XG4gICAgXG4gICAgLy8gR2V0IHRoZSBvcmlnaW5hbCByYXcgY2hlY2tzdW0gaWYgaXQgZXhpc3RzXG4gICAgLy8gVHJ5IHRoZSBuZXcgc3RhbmRhcmRpemVkIGZpZWxkIG5hbWUgZmlyc3QsIHRoZW4gZmFsbCBiYWNrIHRvIHRoZSBsZWdhY3kgbmFtZVxuICAgIGNvbnN0IHJhd0NoZWNrc3VtID0gb3JpZ2luYWxTcGVjW1wieC1zcGVjLWNvbnRlbnQtc2hhXCJdIHx8XG4gICAgICBvcmlnaW5hbFNwZWNbXCJ4LXNwZWMtY2hlY2tzdW1cIl0gfHxcbiAgICAgIFwiXCI7XG4gICAgXG4gICAgLy8gUHJvY2VzcyB0aGUgc3BlYyBhbmQgZ2VuZXJhdGUgYSBjaGVja3N1bVxuICAgIGNvbnN0IHsgY29udGVudDogcHJvY2Vzc2VkQ29udGVudCwgY2hlY2tzdW06IHByb2Nlc3NlZENoZWNrc3VtIH0gPSBcbiAgICAgIGF3YWl0IHByb2Nlc3NTcGVjQW5kR2VuZXJhdGVDaGVja3N1bShzcGVjUGF0aCk7XG4gICAgXG4gICAgLy8gQWRkIHRoZSBwcm9jZXNzZWQgY2hlY2tzdW0gdG8gdGhlIG9yaWdpbmFsIHNwZWNcbiAgICBjb25zdCB1cGRhdGVkQ29udGVudCA9IGFkZFByb2Nlc3NlZENoZWNrc3VtVG9TcGVjKG9yaWdpbmFsQ29udGVudCwgcHJvY2Vzc2VkQ2hlY2tzdW0pO1xuICAgIFxuICAgIC8vIFdyaXRlIHRoZSB1cGRhdGVkIHNwZWMgYmFjayB0byB0aGUgZmlsZVxuICAgIGF3YWl0IERlbm8ud3JpdGVUZXh0RmlsZShzcGVjUGF0aCwgdXBkYXRlZENvbnRlbnQpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKGBVcGRhdGVkIHNwZWMgd2l0aCBjb250ZW50IFNIQSBjaGVja3N1bTogJHtwcm9jZXNzZWRDaGVja3N1bX1gKTtcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgc3BlY1BhdGgsXG4gICAgICByYXdDaGVja3N1bSxcbiAgICAgIHByb2Nlc3NlZENoZWNrc3VtXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciBwcm9jZXNzaW5nIHNwZWMgYXQgJHtzcGVjUGF0aH06YCwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIENMSSBlbnRyeSBwb2ludCBmb3IgZGlyZWN0IHVzYWdlXG5pZiAoaW1wb3J0Lm1ldGEubWFpbikge1xuICB0cnkge1xuICAgIC8vIEVuc3VyZSBhIHNwZWMgZmlsZSBwYXRoIHdhcyBwcm92aWRlZFxuICAgIGlmIChEZW5vLmFyZ3MubGVuZ3RoIDwgMSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIlVzYWdlOiBkZW5vIHJ1biAtQSBkZXJlZmVyZW5jZS1zcGVjLnRzIDxwYXRoLXRvLXNwZWMtZmlsZT5cIik7XG4gICAgICBEZW5vLmV4aXQoMSk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHNwZWNQYXRoID0gRGVuby5hcmdzWzBdO1xuICAgIFxuICAgIC8vIFByb2Nlc3MgdGhlIHNwZWNcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9jZXNzU3BlYyhzcGVjUGF0aCk7XG4gICAgY29uc29sZS5sb2coYFxuU3BlYyBmaWxlOiAke3Jlc3VsdC5zcGVjUGF0aH1cblJhdyBjaGVja3N1bTogJHtyZXN1bHQucmF3Q2hlY2tzdW19XG5Db250ZW50IFNIQSBjaGVja3N1bTogJHtyZXN1bHQucHJvY2Vzc2VkQ2hlY2tzdW19XG4gICAgYCk7XG4gICAgXG4gICAgRGVuby5leGl0KDApO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjpcIiwgZXJyb3IpO1xuICAgIERlbm8uZXhpdCgxKTtcbiAgfVxufSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBZ0JBOzs7O0NBSUMsR0FDRCxPQUFPLGVBQWUsK0JBQStCLFFBQWdCO0VBSW5FLElBQUk7SUFDRixRQUFRLEdBQUcsQ0FBQyxDQUFDLGdDQUFnQyxFQUFFLFNBQVMsR0FBRyxDQUFDO0lBRTVELHFCQUFxQjtJQUNyQixNQUFNLGFBQWEsTUFBTSxLQUFLLFlBQVksQ0FBQztJQUUzQyx5Q0FBeUM7SUFDekMsTUFBTSxPQUFPLEtBQUssS0FBSyxDQUFDO0lBRXhCLHFGQUFxRjtJQUNyRix3RkFBd0Y7SUFDeEYsTUFBTSxtQkFBbUIsS0FBSyxTQUFTLENBQUMsTUFBTSxNQUFNO0lBRXBELHVEQUF1RDtJQUN2RCxNQUFNLFdBQVcsTUFBTSxpQkFBaUI7SUFFeEMsUUFBUSxHQUFHLENBQUMsQ0FBQywyREFBMkQsQ0FBQztJQUV6RSxPQUFPO01BQ0wsU0FBUztNQUNUO0lBQ0Y7RUFDRixFQUFFLE9BQU8sT0FBTztJQUNkLFFBQVEsS0FBSyxDQUFDLENBQUMsaUNBQWlDLEVBQUUsU0FBUyxDQUFDLENBQUMsRUFBRTtJQUMvRCxNQUFNO0VBQ1I7QUFDRjtBQUVBOzs7O0NBSUMsR0FDRCxlQUFlLGlCQUFpQixPQUFlO0VBQzdDLE1BQU0sVUFBVSxJQUFJO0VBQ3BCLE1BQU0sT0FBTyxRQUFRLE1BQU0sQ0FBQztFQUM1QixNQUFNLGFBQWEsTUFBTSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVztFQUN6RCxNQUFNLFlBQVksTUFBTSxJQUFJLENBQUMsSUFBSSxXQUFXO0VBQzVDLE1BQU0sVUFBVSxVQUFVLEdBQUcsQ0FBQyxDQUFBLElBQUssRUFBRSxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMsR0FBRyxNQUFNLElBQUksQ0FBQztFQUV6RSxPQUFPO0FBQ1Q7QUFFQTs7Ozs7Q0FLQyxHQUNELE9BQU8sU0FBUywyQkFDZCxXQUFtQixFQUNuQixpQkFBeUI7RUFFekIsSUFBSTtJQUNGLGlCQUFpQjtJQUNqQixNQUFNLE9BQU8sS0FBSyxLQUFLLENBQUM7SUFFeEIsaUVBQWlFO0lBQ2pFLElBQUksQ0FBQyxxQkFBcUIsR0FBRztJQUU3Qiw0REFBNEQ7SUFDNUQsSUFBSSxDQUFDLDRCQUE0QixHQUFHO0lBRXBDLDBCQUEwQjtJQUMxQixPQUFPLEtBQUssU0FBUyxDQUFDLE1BQU0sTUFBTTtFQUNwQyxFQUFFLE9BQU8sT0FBTztJQUNkLFFBQVEsS0FBSyxDQUFDLDRDQUE0QztJQUMxRCxNQUFNO0VBQ1I7QUFDRjtBQUVBOzs7O0NBSUMsR0FDRCxPQUFPLGVBQWUsWUFBWSxRQUFnQjtFQUtoRCxJQUFJO0lBQ0YseUJBQXlCO0lBQ3pCLE1BQU0sa0JBQWtCLE1BQU0sS0FBSyxZQUFZLENBQUM7SUFDaEQsTUFBTSxlQUFlLEtBQUssS0FBSyxDQUFDO0lBRWhDLDZDQUE2QztJQUM3QywrRUFBK0U7SUFDL0UsTUFBTSxjQUFjLFlBQVksQ0FBQyxxQkFBcUIsSUFDcEQsWUFBWSxDQUFDLGtCQUFrQixJQUMvQjtJQUVGLDJDQUEyQztJQUMzQyxNQUFNLEVBQUUsU0FBUyxnQkFBZ0IsRUFBRSxVQUFVLGlCQUFpQixFQUFFLEdBQzlELE1BQU0sK0JBQStCO0lBRXZDLGtEQUFrRDtJQUNsRCxNQUFNLGlCQUFpQiwyQkFBMkIsaUJBQWlCO0lBRW5FLDBDQUEwQztJQUMxQyxNQUFNLEtBQUssYUFBYSxDQUFDLFVBQVU7SUFFbkMsUUFBUSxHQUFHLENBQUMsQ0FBQyx3Q0FBd0MsRUFBRSxtQkFBbUI7SUFFMUUsT0FBTztNQUNMO01BQ0E7TUFDQTtJQUNGO0VBQ0YsRUFBRSxPQUFPLE9BQU87SUFDZCxRQUFRLEtBQUssQ0FBQyxDQUFDLHlCQUF5QixFQUFFLFNBQVMsQ0FBQyxDQUFDLEVBQUU7SUFDdkQsTUFBTTtFQUNSO0FBQ0Y7QUFFQSxtQ0FBbUM7QUFDbkMsSUFBSSxZQUFZLElBQUksRUFBRTtFQUNwQixJQUFJO0lBQ0YsdUNBQXVDO0lBQ3ZDLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUc7TUFDeEIsUUFBUSxLQUFLLENBQUM7TUFDZCxLQUFLLElBQUksQ0FBQztJQUNaO0lBRUEsTUFBTSxXQUFXLEtBQUssSUFBSSxDQUFDLEVBQUU7SUFFN0IsbUJBQW1CO0lBQ25CLE1BQU0sU0FBUyxNQUFNLFlBQVk7SUFDakMsUUFBUSxHQUFHLENBQUMsQ0FBQztXQUNOLEVBQUUsT0FBTyxRQUFRLENBQUM7Y0FDZixFQUFFLE9BQU8sV0FBVyxDQUFDO3NCQUNiLEVBQUUsT0FBTyxpQkFBaUIsQ0FBQztJQUM3QyxDQUFDO0lBRUQsS0FBSyxJQUFJLENBQUM7RUFDWixFQUFFLE9BQU8sT0FBTztJQUNkLFFBQVEsS0FBSyxDQUFDLFVBQVU7SUFDeEIsS0FBSyxJQUFJLENBQUM7RUFDWjtBQUNGIn0=
// denoCacheMetadata=13786628310524910385,5486008739967377439
