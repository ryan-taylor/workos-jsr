// Copyright 2018-2025 the Deno authors. MIT license.
// This module is browser compatible.

import { normalizeString } from "../_common/normalize_string.ts";
import { assertPath } from "../_common/assert_path.ts";
import { isPosixPathSeparator } from "./_util.ts";

/**
 * Resolves path segments into a `path`.
 *
 * @example Usage
 * ```ts
 * import { resolve } from "@std/path/posix/resolve";
 * import { assertEquals } from "@std/assert";
 *
 * const path = resolve("/foo", "bar", "baz/asdf", "quux", "..");
 * assertEquals(path, "/foo/bar/baz/asdf");
 * ```
 *
 * @param pathSegments The path segments to resolve.
 * @returns The resolved path.
 */
export function resolve(...pathSegments: string[]): string {
  let resolvedPath = "";
  let resolvedAbsolute = false;

  for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    let path: string;

    if (i >= 0) path = pathSegments[i]!;
    else {
      // deno-lint-ignore no-explicit-any
      const { Deno } = globalThis as any;
      if (typeof Deno?.cwd !== "function") {
        throw new TypeError(
          "Resolved a relative path without a current working directory (CWD)",
        );
      }
      path = Deno.cwd();
    }

    assertPath(path);

    // Skip empty entries
    if (path.length === 0) {
      continue;
    }

    resolvedPath = `${path}/${resolvedPath}`;
    resolvedAbsolute = isPosixPathSeparator(path.charCodeAt(0));
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when Deno.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeString(
    resolvedPath,
    !resolvedAbsolute,
    "/",
    isPosixPathSeparator,
  );

  if (resolvedAbsolute) {
    if (resolvedPath.length > 0) return `/${resolvedPath}`;
    else return "/";
  } else if (resolvedPath.length > 0) return resolvedPath;
  else return ".";
}

// denoCacheMetadata={"headers":{"content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","etag":"\"ca8fc9af1ebc514a89102f481121657e\"","x-goog-stored-content-encoding":"identity","content-length":"1910","x-goog-generation":"1745475807115684","x-goog-stored-content-length":"1910","x-goog-hash":"crc32c=A8x6nw==,md5=yo/Jrx68UUqJEC9IESFlfg==","via":"1.1 google","expires":"Wed, 13 May 2026 01:47:32 GMT","last-modified":"Thu, 24 Apr 2025 06:23:27 GMT","cache-control":"public, max-age=31536000, immutable","x-goog-storage-class":"STANDARD","x-jsr-cache-id":"YYZ","x-jsr-cache-status":"revalidated","x-content-type-options":"nosniff","date":"Tue, 13 May 2025 01:47:32 GMT","x-goog-metageneration":"1","accept-ranges":"bytes","x-robots-tag":"noindex","x-guploader-uploadid":"AAO2VwrC9T7aWA6lYpQrpO7agNyP6WWSqQKzS9Vg0_8w6H4ZGie7iBOtS0Y4ebtG-VYmESj2V5B3ucwQHUV_4w","content-type":"text/typescript","access-control-expose-headers":"*","server":"UploadServer","age":"0","access-control-allow-origin":"*","cross-origin-resource-policy":"cross-origin","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"},"url":"https://jsr.io/@std/path/1.0.9/posix/resolve.ts","time":1747100852}