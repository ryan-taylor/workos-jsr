// Copyright 2018-2025 the Deno authors. MIT license.
import { dirname } from "jsr:@std/path@^1.0.9/dirname";
import { ensureDir, ensureDirSync } from "./ensure_dir.ts";
import { toPathString } from "./_to_path_string.ts";

/**
 * Asynchronously ensures that the hard link exists.
 *
 * If the parent directories for the hard link do not exist, they are created.
 *
 * Requires `--allow-read` and `--allow-write` permissions.
 *
 * @see {@link https://docs.deno.com/runtime/manual/basics/permissions#file-system-access}
 * for more information on Deno's permissions system.
 *
 * @param src The source file path as a string or URL. Directory hard links are
 * not allowed.
 * @param dest The destination link path as a string or URL.
 *
 * @returns A void promise that resolves once the hard link exists.
 *
 * @example Usage
 * ```ts ignore
 * import { ensureLink } from "@std/fs/ensure-link";
 *
 * await ensureLink("./folder/targetFile.dat", "./folder/targetFile.link.dat");
 * ```
 */
export async function ensureLink(src: string | URL, dest: string | URL) {
  dest = toPathString(dest);
  await ensureDir(dirname(dest));

  await Deno.link(toPathString(src), dest);
}

/**
 * Synchronously ensures that the hard link exists.
 *
 * If the parent directories for the hard link do not exist, they are created.
 *
 * Requires `--allow-read` and `--allow-write` permissions.
 *
 * @see {@link https://docs.deno.com/runtime/manual/basics/permissions#file-system-access}
 * for more information on Deno's permissions system.
 *
 * @param src The source file path as a string or URL. Directory hard links are
 * not allowed.
 * @param dest The destination link path as a string or URL.
 *
 * @returns A void value that returns once the hard link exists.
 *
 * @example Usage
 * ```ts ignore
 * import { ensureLinkSync } from "@std/fs/ensure-link";
 *
 * ensureLinkSync("./folder/targetFile.dat", "./folder/targetFile.link.dat");
 * ```
 */
export function ensureLinkSync(src: string | URL, dest: string | URL) {
  dest = toPathString(dest);
  ensureDirSync(dirname(dest));

  Deno.linkSync(toPathString(src), dest);
}

// denoCacheMetadata={"headers":{"via":"1.1 google","content-length":"2115","etag":"\"101e0ba96c00bd8980eeb884f66e921e\"","x-guploader-uploadid":"AAO2VwrpGFKGIrVoaHRJn3wU0wJ6AESybLiMzBIMC5fezXQOdyvKftPbeStdpjGAscRPCrl3XVFFBmMt2oTo7w","content-type":"text/typescript","age":"0","x-goog-stored-content-length":"2115","x-robots-tag":"noindex","x-goog-generation":"1745475826539920","x-goog-stored-content-encoding":"identity","server":"UploadServer","date":"Tue, 13 May 2025 01:47:31 GMT","cache-control":"public, max-age=31536000, immutable","last-modified":"Thu, 24 Apr 2025 06:23:46 GMT","x-goog-storage-class":"STANDARD","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","x-goog-hash":"crc32c=OWbIdw==,md5=EB4LqWwAvYmA7riE9m6SHg==","accept-ranges":"bytes","x-jsr-cache-id":"YYZ","x-jsr-cache-status":"revalidated","access-control-allow-origin":"*","access-control-expose-headers":"*","expires":"Wed, 13 May 2026 01:47:31 GMT","cross-origin-resource-policy":"cross-origin","x-content-type-options":"nosniff","x-goog-metageneration":"1","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000"},"url":"https://jsr.io/@std/fs/1.0.17/ensure_link.ts","time":1747100851}