name: Publish to JSR

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Get WorkOS version
        id: workos_version
        run: |
          WORKOS_VERSION=$(grep '"workosVersion":' package.json | cut -d'"' -f4)
          echo "workos_version=$WORKOS_VERSION" >> $GITHUB_OUTPUT

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '"version":' package.json | head -1 | cut -d'"' -f4)
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Determine new version
        id: new_version
        run: |
          WORKOS_VERSION="${{ steps.workos_version.outputs.workos_version }}"
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          VERSION_BUMP="${{ github.event.inputs.version_bump || 'patch' }}"

          # Extract base version without alpha suffix
          BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-alpha$//')

          # Handle version bump based on input
          if [[ "$VERSION_BUMP" == "major" ]]; then
            MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
            NEW_VERSION="$((MAJOR + 1)).0.0-alpha"
          elif [[ "$VERSION_BUMP" == "minor" ]]; then
            MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
            MINOR=$(echo $BASE_VERSION | cut -d. -f2)
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0-alpha"
          elif [[ "$VERSION_BUMP" == "prerelease" ]]; then
            # Just keep the same version for prerelease
            NEW_VERSION="$CURRENT_VERSION"
          else
            # Default is patch
            MAJOR=$(echo $BASE_VERSION | cut -d. -f1)
            MINOR=$(echo $BASE_VERSION | cut -d. -f2)
            PATCH=$(echo $BASE_VERSION | cut -d. -f3)
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))-alpha"
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "workos_ref=$WORKOS_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in package.json and deno.json
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          WORKOS_VERSION="${{ steps.new_version.outputs.workos_ref }}"

          # Update package.json
          sed -i "1s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" package.json
          sed -i "s/\"version\": \".*\"-alpha/\"version\": \"$NEW_VERSION\"/" package.json

          # Update JSR version in package.json
          sed -i "/jsr/,/}/ s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" package.json

          # Update deno.json if it exists
          if [ -f "deno.json" ]; then
            sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" deno.json
          fi

          # Update description to include WorkOS version reference
          sed -i "s/WorkOS API (v[0-9.]*)/WorkOS API (v$WORKOS_VERSION)/" package.json

      - name: Publish to JSR
        run: deno publish

      - name: Commit version update
        if: github.event_name == 'workflow_dispatch'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: bump version to ${{ steps.new_version.outputs.version }}'
          file_pattern: 'package.json deno.json'
