// Copyright 2018-2025 the Deno authors. MIT license.
// This module is browser compatible.

import { assertPath } from "../_common/assert_path.ts";
import { isPathSeparator } from "./_util.ts";
import { normalize } from "./normalize.ts";

/**
 * Join all given a sequence of `paths`,then normalizes the resulting path.
 *
 * @example Usage
 * ```ts
 * import { join } from "@std/path/windows/join";
 * import { assertEquals } from "@std/assert";
 *
 * const joined = join("C:\\foo", "bar", "baz\\..");
 * assertEquals(joined, "C:\\foo\\bar");
 * ```
 *
 * Note: If you are working with file URLs,
 * use the new version of `join` from `@std/path/windows/unstable-join`.
 *
 * @param paths The paths to join.
 * @returns The joined path.
 */
export function join(...paths: string[]): string {
  paths.forEach((path) => assertPath(path));
  paths = paths.filter((path) => path.length > 0);
  if (paths.length === 0) return ".";

  // Make sure that the joined path doesn't start with two slashes, because
  // normalize() will mistake it for an UNC path then.
  //
  // This step is skipped when it is very clear that the user actually
  // intended to point at an UNC path. This is assumed when the first
  // non-empty string arguments starts with exactly two slashes followed by
  // at least one more non-slash character.
  //
  // Note that for normalize() to treat a path as an UNC path it needs to
  // have at least 2 components, so we don't filter for that here.
  // This means that the user can use join to construct UNC paths from
  // a server name and a share name; for example:
  //   path.join('//server', 'share') -> '\\\\server\\share\\'
  let needsReplace = true;
  let slashCount = 0;
  const firstPart = paths[0]!;
  if (isPathSeparator(firstPart.charCodeAt(0))) {
    ++slashCount;
    const firstLen = firstPart.length;
    if (firstLen > 1) {
      if (isPathSeparator(firstPart.charCodeAt(1))) {
        ++slashCount;
        if (firstLen > 2) {
          if (isPathSeparator(firstPart.charCodeAt(2))) ++slashCount;
          else {
            // We matched a UNC path in the first part
            needsReplace = false;
          }
        }
      }
    }
  }
  let joined = paths.join("\\");
  if (needsReplace) {
    // Find any more consecutive slashes we need to replace
    for (; slashCount < joined.length; ++slashCount) {
      if (!isPathSeparator(joined.charCodeAt(slashCount))) break;
    }

    // Replace the slashes if needed
    if (slashCount >= 2) joined = `\\${joined.slice(slashCount)}`;
  }

  return normalize(joined);
}

// denoCacheMetadata={"headers":{"x-goog-hash":"crc32c=LIZCuQ==,md5=zj2RJFNI11reugCjl2CC4w==","content-length":"2568","expires":"Wed, 13 May 2026 01:47:32 GMT","content-type":"text/typescript","x-goog-metageneration":"1","access-control-expose-headers":"*","x-goog-generation":"1745475807232955","alt-svc":"h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000","content-security-policy":"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';","age":"0","x-jsr-cache-status":"revalidated","date":"Tue, 13 May 2025 01:47:32 GMT","x-goog-stored-content-encoding":"identity","x-goog-storage-class":"STANDARD","via":"1.1 google","cache-control":"public, max-age=31536000, immutable","access-control-allow-origin":"*","etag":"\"ce3d91245348d75adeba00a3976082e3\"","server":"UploadServer","x-jsr-cache-id":"YYZ","x-guploader-uploadid":"AAO2Vwrsx6socJNvPja4o-e-kGxTlc93IenV2IsJSZi518vJD5-_l2z0cD3Ew4d5NiPp8AFn_KDZl4KzJ4NDZg","x-robots-tag":"noindex","cross-origin-resource-policy":"cross-origin","last-modified":"Thu, 24 Apr 2025 06:23:27 GMT","x-content-type-options":"nosniff","accept-ranges":"bytes","x-goog-stored-content-length":"2568"},"url":"https://jsr.io/@std/path/1.0.9/windows/join.ts","time":1747100852}